
import torch
import os

# --- Device Configuration ---
DEVICE = "mps" if torch.backends.mps.is_available() else "cpu"
print(f"Using device: {DEVICE}")

# --- Model Configuration ---
# LM Studio API Configuration
LM_STUDIO_API_BASE = "http://localhost:1234/v1"
# Model name for chat completions (e.g., google/gemma-3-4b-it)
LM_STUDIO_CHAT_MODEL_NAME = "paligemma-3b-mix-448"
# Model name for embeddings (check your LM Studio setup for the correct name)
LM_STUDIO_EMBEDDING_MODEL_NAME = "nomic-ai/nomic-embed-text-v1.5" # Placeholder, user needs to verify

# --- Video Processing Configuration ---
KEYFRAME_EXTRACTION_INTERVAL = 2  # seconds - Changed from 1 to 2 to reduce frame processing
SIMILARITY_THRESHOLD = 0.85  # For final ad matching
PRELIMINARY_SIMILARITY_THRESHOLD = 0.6 # For preliminary semantic check before full OCR
REPRESENTATIVE_FRAME_SIMILARITY_THRESHOLD = 0.95 # For filtering similar frames in recorded video

# --- Directory Configuration ---
# Base directory for all data generated by the application
BASE_DATA_DIR = "./data"

# Ensure base data directory exists
os.makedirs(BASE_DATA_DIR, exist_ok=True)

# Derived directories
DATABASE_DIR = os.path.join(BASE_DATA_DIR, "database")
MATERIALS_DIR = os.path.join(BASE_DATA_DIR, "materials")
RECORDED_VIDEOS_DIR = os.path.join(BASE_DATA_DIR, "recorded_videos")
REPORTS_DIR = os.path.join(BASE_DATA_DIR, "reports")
SCREENSHOTS_DIR = os.path.join(REPORTS_DIR, "screenshots")

# --- Debugging Configuration ---
SAVE_DEBUG_FRAMES = True # Set to True to save cropped frames for debugging
DEBUG_FRAMES_DIR = os.path.join(BASE_DATA_DIR, "debug_frames")

# Ensure debug frames directory exists
os.makedirs(DEBUG_FRAMES_DIR, exist_ok=True)

# --- Database Configuration ---
DATABASE_FILE = os.path.join(DATABASE_DIR, "metadata.db")

# --- Reporter Configuration ---
NUM_SCREENSHOTS = 3
